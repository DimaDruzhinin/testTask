import org.akhikhl.gretty.FarmStartTask
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.4.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"

    }
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: "org.sonarqube"
apply from: 'gradle/dependencies.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

String resolveConfigDir() {
    String configDirPropertyName = 'CONFIG_PATH'
    String dir
    if (System.env[configDirPropertyName]) {
        dir = System.env[configDirPropertyName]
    } else if (System.getProperty(configDirPropertyName)) {
        dir = System.getProperty(configDirPropertyName)
    } else {
        dir = file("$rootDir/etc").path
    }
    if (new File(dir).exists()) {
        return dir
    }
    throw new GradleScriptException("Please setup '$configDirPropertyName'", null)
}

ext.configDir = resolveConfigDir()

def readConfig() {
    Properties config = new Properties()
    new File("$configDir/application.properties").withReader { reader -> config.load(reader) }
    println "Application properties: $config"
    return config
}

ext.config = readConfig()

dependencies {
    gretty libs.commonsDBCP
    gretty files(configDir)
    gretty 'xerces:xercesImpl:2.11.0'

    compile libs.spring
    compile libs.apacheCommons
    compile libs.apacheIO
    compile libs.mysqlJdbc
    compile libs.logging

    testCompile libs.testng
    testCompile libs.mockito
}
task _prepareLogback(type: Copy) {
    def templateUrl = "${configDir}/templates/logback-template.xml"

    inputs.file templateUrl
    outputs.file "$configDir/generated/logback.xml"

    from templateUrl
    into "$configDir/generated"
    rename { 'logback.xml' }
}

//////////////////////////
// jetty configuration
//////////////////////////

task _prepareJetty(type: Copy) {
    def templateUrl = "${configDir}/templates/jetty-template.xml"
    def configPath = "${configDir}/application.properties"

    inputs.file templateUrl
    inputs.file configPath
    outputs.file "$configDir/generated/jetty.xml"

    from templateUrl
    into "$configDir/generated"
    rename { 'jetty.xml' }
    filter(ReplaceTokens, tokens: config)
}


afterEvaluate {
    project.tasks.withType(FarmStartTask).each {
        it.dependsOn(_prepareJetty, _prepareLogback)
    }
}

gretty {
    scanInterval = 1 //Scan for changes every second
    host = '0.0.0.0' //Enable network access from outside your local machine
    serverConfigFile = "$configDir/generated/jetty.xml"//custom  settings for ServletContainer
    servletContainer = 'jetty9' //Jetty9 supports Servlet API 3.0
    managedClassReload = true //Activate spring-loaded class reloading
    recompileOnSourceChange = false
    springBoot = false

    debugSuspend = false
    jvmArgs = [
            "-DconfigDir=$configDir",
            "-Dlogback.configurationFile=${file(configDir).toPath().toUri()}/generated/logback.xml",
            "-Dclient.encoding.override=UTF-8",
            "-Dfile.encoding=UTF-8",
            "-XX:+CMSClassUnloadingEnabled",
            "-Dorg.eclipse.jetty.annotations.maxWait=120", // scanning for SCI may take too much time (60 sec is default)
    ]
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.verbose", "true"
    }
}